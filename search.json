[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Expository Article",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "posts/blog.html",
    "href": "posts/blog.html",
    "title": "J038",
    "section": "",
    "text": "Title: Building Interactive Dashboards with Taipy\n\n\nIntroduction:\n\n\nThis document provides a comprehensive guide to building interactive dashboards using Taipy, a Python framework for data-driven applications. Taipy simplifies dashboard creation with its Taipy GUI module, allowing developers to create dynamic, responsive, and visually appealing user interfaces with minimal effort.  In this guide, we will explore:\n\n\nHow to set up Taipy\n\n\nKey features of Taipy dashboards\n\n\nCode structure and examples\n\n\nUse cases for real-world applications\n\n\n\n\nInstallation & Setup:\n\n\nTo get started with Taipy, install it using:\n\n\npip install taipy\n\n\nBasic Taipy Application Structure\n\nA Taipy-based application generally consists of:\n   1. Taipy Core – Manages workflows, scenarios, and data pipelines.    2. Taipy GUI – Provides a user-friendly way to create interactive dashboards.\n\nSetting Up a Taipy Project    1. Install Taipy and necessary dependencies.    2. Import required modules:\n\n\nfrom taipy.gui import Gui\n\n\n   3. Define your data processing logic (if needed).    4. Create UI elements such as dropdowns, filters, and charts.    5. Run the application using:\n\n\nGui(page).run()\n\n\nKey Features & Explanation:\n\n\n🔹 Dynamic Data Filtering & Selection\n\n\nUsers can filter data using date selectors, dropdowns, and buttons.\n\n\nExample: A dropdown to select a year for air pollution data visualization.\n\n\n🔹 Interactive Data Visualizations\n\n\nBar charts for comparing pollution levels across states.\n\n\nReal-time data updates when filters change.\n\n\nDark-themed UI for better readability.\n\n\n🔹 User Input Handling\n\n\nDropdown menus for category selection.\n\n\nDate pickers to choose data ranges.\n\n\n“Apply” button to update visualizations dynamically.\n\n\n🔹 Extensive Charting Options\n\n\nBuilt-in chart types: Line, bar, scatter, heatmaps, and geographic maps.\n\n\nPlotly integration: Advanced interactivity (zoom, hover tooltips, annotations).\n\n\n🔹 Data-Driven Applications \n\n\nDirectly bind datasets (CSV, SQL, APIs) to UI components.\n\n\nFeatures: Auto-syncing tables, dynamic filters, and pagination.\n\n\n\n\nCode Examples:\n\n\na) Creating a Simple Dashboard Layout\n\n\nwith tgb.Page() as page:\n    tgb.text(\"Select State:\")\n    tgb.selector(value=\"{selected_state}\", lov=available_state, on_change=update_data,dropdown=True, \n    label=\"State\")\n    tgb.chart(data=\"{chart_data}\",mode='lines', x=\"Timestamp\", y=\"PM2.5\", layout=\"{layout}\")\n\n\nThis is how we define the layout of the page we want to create. This page will have one text at top written as “Select State” and there will be a dropdown selector below it. The default of dropdown will be the intial assigned value of variable selected_state and the available options will be lov(list of values ) - available_state. And we define a chart which will change on different values of selector. Here is how the output layout for this code will look like :\n\n\n\nb) Plotting a Bar Chart\n\nFirst we need to assign a on_change or on_apply action to selector,slider,etc. So that on change of the value in selector/slider the chart also changes dynamically.\n\n\ntgb.selector(value=\"{selected_year}\", lov=available_years, on_change=update_data,dropdown=True, \n    label=\"Year\")\n\n\nNow we will define a update_data which takes ‘state’ as parameter and does not require any arguement when calling it. state refers to the current time at which the action has triggered. state will change the value of desired variables according to that change. For example i want the chart to change every time i change year from the selector. So the desired update_data function will look like :\n\n\ndef update_data(state):\n    state.selected_year = state.selected_year\n    state.chart_data = get_top_states(state.selected_year)\n    state.layout = {\"yaxis\": {\"title\": \"PM2.5 Levels\"}, \"title\": f\"Top 10 States with highest PM2.5 Level in {state.selected_year}\"}\n\n\nThis function upon called using selector will change three values- selected_year which will be chosen by user and using this value of year the chart_data will change by the function get_top_states which will take the arguement selected_year and at last the layout will also be changed. Now we will look at the function get_top states :\n\n\ndef get_top_states(year):\n    filtered_df = df[df[\"Year\"] == year]\n    if filtered_df.empty:\n        return pd.DataFrame({\"state\": [], \"PM2.5\": []})  \n    return (\n        filtered_df.groupby(\"state\")[\"PM2.5\"]\n        .mean()\n        .sort_values(ascending=False)\n        .head(10)\n        .reset_index()\n    )\n\n\nThis will return a dataframe to variable chart_data which is eventually used to plot the chart in page.\n\n\n c) Styling and Customization&gt;\n\n\nWe can also customize colors, font, themes etc.\n\n\npage = \"\"\"\n&lt;style&gt;\n  h1 {color: lightblue; text-align: center;}\n&lt;/style&gt;\n\n# Customized Dashboard\n\nSelect a Year: &lt;|{selected_year}|selector|lov={years}|&gt;\n\n&lt;|{chart}|chart|type=bar|color=#7B68EE|&gt;\n\"\"\"\n\n\nTaipy allows CSS-like customization for styling the dashboard.\n\n\nScreenshots & Visuals:\n\n\nVisual Elements in Taipy\n\n\n\n\nSlider\n\n\n\n\n\n\n\nSelector\n\n\n\n\n\n\n\nDate\n\n\n\n\n\n\n\nButton\n\n\n\n\n\nGraphs\n\n\n\n\nBar Graph\n\n\n\n\n\n\n\nLine Graph\n\n\n\n\n\n\n\nPie Chart\n\n\n\n\n\n\n\nHeatmap\n\n\n\n\n\nDashboard\n\n\n\nUse Cases:\n\n\n🔹 Air Pollution Monitoring Dashboard\n\n\nVisualizing PM2.5 levels across different states over time.\n\n\nAllowing users to filter by year and region.\n\n\n🔹 Environmental Data Analysis\n\n\nData-driven decision-making for government agencies.\n\n\nHistorical comparisons of pollution trends.\n\n\n🔹 Real-Time Data Visualization\n\n\nDashboards for tracking pollution changes dynamically.\n\n\n\n\nConclusion:\n\n\nTaipy provides an efficient and user-friendly way to build dashboards. Its ability to handle dynamic updates, interactivity, and visualization makes it an excellent choice for environmental data analysis, business intelligence, and more.\nBy following this guide, you can customize your own Taipy dashboards and expand their functionality as needed.\n\n\nReferences & Further Reading:\n\n\nTaipy Official Documentation\n\n\nTaipy GitHub Repository\n\n\nYoutube Tutorial"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PSDV Assignment",
    "section": "",
    "text": "Welcome to J038’s Expository Article !\nclick on blog at top right corner to proceed."
  }
]